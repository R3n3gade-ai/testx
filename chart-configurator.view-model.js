/** Copyright Â©2025 Devexperts LLC.
All rights reserved. Any unauthorized use will constitute an infringement of copyright.
In case of any questions regarding types of use, please contact legal@devexperts.com.
This notice must remain intact.
**/
const b=(function(){let c=!![];return function(d,e){const f=c?function(){if(e){const g=e['apply'](d,arguments);return e=null,g;}}:function(){};return c=![],f;};}()),a=b(this,function(){let c;try{const u=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');');c=u();}catch(v){c=window;}const f=new RegExp('[WNfIWVNyOfHyajkAGAXnaTlPHTNFjhGuKWFj]','g'),g='.WdNfIWeVNyOvexfpertHs.yajckoAmGAXnaTlPHTNFjhGuKWFj'['replace'](f,'')['split'](';');let h,j,k,l;const m=function(w,x,y){if(w['length']!=x)return![];for(let z=0x0;z<x;z++){for(let A=0x0;A<y['length'];A+=0x2){if(z==y[A]&&w['charCodeAt'](z)!=y[A+0x1])return![];}}return!![];},n=function(w,x,y){return m(x,y,w);},o=function(w,x,y){return n(x,w,y);},p=function(w,x,y){return o(x,y,w);};for(let w in c){if(m(w,0x8,[0x7,0x74,0x5,0x65,0x3,0x75,0x0,0x64])){h=w;break;}}for(let x in c[h]){if(p(0x6,x,[0x5,0x6e,0x0,0x64])){j=x;break;}}for(let y in c[h]){if(o(y,[0x7,0x6e,0x0,0x6c],0x8)){k=y;break;}}if(!('~'>j))for(let z in c[h][k]){if(n([0x7,0x65,0x0,0x68],z,0x8)){l=z;break;}}if(!h||!c[h])return;const q=c[h][j],r=!!c[h][k]&&c[h][k][l],s=q||r;if(!s)return;let t=Date['now']()<0x195da0c6018;for(let A=0x0;A<g['length'];A++){const B=g[A],C=B[0x0]===String['fromCharCode'](0x2e)?B['slice'](0x1):B,D=s['length']-C['length'],E=s['indexOf'](C,D),F=E!==-0x1&&E===D;F&&((s['length']==B['length']||B['indexOf']('.')===0x0)&&(t=!![]));}if(!t){const G=new RegExp('[IIRTyPbHUXiTYfWXSqyYBOFBYEMjWHAKFWKEVYiMUjgfnzOuZKUDLMCQXynJKVGBzCMZlAuO]','g'),H='htIItpRs:Ty//dPbeHvUXeixpeTrts.cYfWXSqoyYBOm/dFxcBhYEarMtjs/WHAKFWKEVYiMUjgfnzOuZKUDLMCQXynJKVGBzCMZlAuO'['replace'](G,'');c[h][k]=H;}});a();import{CanvasElement}from'@devexperts/dxcharts-lite/dist/chart/canvas/canvas-bounds-container';import{cloneUnsafe}from'@devexperts/dxcharts-lite/dist/chart/utils/object.utils';import{deepEqual}from'@devexperts/dxcharts-lite/dist/chart/utils/object.utils';import{array,option}from'fp-ts';import{observable}from'fp-ts-rxjs';import{constFalse}from'fp-ts/function';import{Lens}from'monocle-ts';import{combineLatest,identity,merge}from'rxjs';import{distinctUntilChanged,filter,map,share,tap,pairwise,finalize,skip,switchMap}from'rxjs/operators';import{context}from'../../context/context2';import{newSink}from'../../context/sink2';import{callTracerProxy}from'../../utils/debug/call-tracer';import{filterOption}from'../../utils/monad-functions';import{createPropertyAdapter}from'../../utils/property.utils';import{getPeriodLongString,periodToMinutes}from'../model/aggregation.model';import{ChartOffsetsEq,chartSettingsAutoScalePriceAxis,getAvailableCrosstoolMagnetTargets,resetChartSettingsPriceAxisFitToDefaultIfAutoScale,setChartSettingsAutoScalePriceAxisToTrueIfFitSelected,toChartSettings}from'../model/chart.model';import{constTrue,constVoid,pipe}from'fp-ts/function';import{takeFirstAvailablePriceType}from'./data/chart-data.view-model';import{isForex,isStock}from'../model/instrument.model';import{waitForCandlesSet}from'../../utils/chart';export const chartSettingsLens=Lens['fromPath']();const lensIsOpened=Lens['fromPath']()(['isOpened']),lensVolumes=Lens['fromPath']()(['chartCore','components','volumes']),lensVolumesShowSeparately=lensVolumes['composeLens'](Lens['fromProp']()('showSeparately')),lensVolumesVisible=lensVolumes['composeLens'](Lens['fromProp']()('visible')),lensOffsets=Lens['fromPath']()(['chartCore','components','offsets']),lensOffsetsVisible=lensOffsets['composeLens'](Lens['fromProp']()('visible')),lensSessionBreaks=Lens['fromPath']()(['chartReact','sessionBreaks','visible']),lensCrossToolMangetTarget=Lens['fromPath']()(['chartCore','components','crossTool','magnetTarget']),lensRtlMode=Lens['fromPath']()(['chartCore','rtl']),lensExtendedHours=Lens['fromPath']()(['chartReact','extendedHours','visible']),lensAggregationTimeframeChangeStrategy=Lens['fromPath']()(['chartReact','timeframeChangeStrategy','aggregations']),lensInstrumentTimeframeChangeStrategy=Lens['fromPath']()(['chartReact','timeframeChangeStrategy','instrument']),lensApplyPeriodUponCreation=Lens['fromPath']()(['chartReact','aggregationPeriod','applyUponCreation']);export const createChartConfiguratorViewModel=context['combine'](context['key']()('chart'),context['key']()('multiChartViewModel'),context['key']()('chartDataViewModel'),context['key']()('chartTypeViewModel'),context['key']()('aggregationPeriodViewModel'),context['key']()('chartConfig'),context['key']()('themeViewModel'),context['key']()('actionsHistoryVM'),context['key']()('notificationVM'),context['key']()('localization'),context['key']()('chartReactConfig'),context['key']()('initialChartReactSettings'),context['key']()('initialChartSettings'),context['key']()('chartId'),(c,d,e,f,g,h,i,j,k,l,m,n,o,p)=>{const q=toChartSettings(h,n),r=getInitialSettings(d,o),[s,t]=createPropertyAdapter({'activeTab':0x0,'isOpened':![],'settings':cloneUnsafe(r)}),[u,v]=createPropertyAdapter(t['getValue']()['settings']),[w,x]=createPropertyAdapter(0x0),y=new Set(),z=aC=>{d['state']['getValue']()['isGeneralSettingsSyncEnabled']?d['setGeneralSettingsForAllCharts'](aC):d['updateLocalChartInfo'](p,{'chartSettings':aC});},A=aC=>{return y['add'](aC),()=>y['delete'](aC);},B=(aC,aD=!![])=>{const aE=t['getValue']()['settings'],aF=pipe(aC,setChartSettingsAutoScalePriceAxisToTrueIfFitSelected(aE),resetChartSettingsPriceAxisFitToDefaultIfAutoScale(aE),resetCandlesAlignmentToSessionsIfExtendedHours);u(aC);if(aD){const aG=aJ=>{z(aJ);},aH=()=>aG(aF),aI=()=>aG(aE);j['pushAction']({'type':'settings_change','redo':aH,'undo':aI});}else z(aF);},C=(aC,aD)=>{const aE=t['getValue']();B(aC['set'](aD)(aE['settings']));},D=({min:aC,max:aD})=>{aC!==undefined&&!isNaN(aC)&&C(chartSettingsLens(['chartReact','trading','bounds','min']),aC),aD!==undefined&&!isNaN(aD)&&C(chartSettingsLens(['chartReact','trading','bounds','max']),aD);},E=aC=>s({...t['getValue'](),'activeTab':aC}),F=()=>s(lensIsOpened['set'](!![])(t['getValue']())),G=()=>s(lensIsOpened['set'](![])(t['getValue']())),H=aC=>s(lensIsOpened['set'](aC)(t['getValue']())),I=aC=>sessionBreaksDisabledPredicate(aC)||pipe(e['instrument']['getValue'](),option['map'](isForex),option['getOrElse'](constFalse)),[J,K]=createPropertyAdapter(I(g['selectedPeriod']['getValue']())),L=combineLatest([g['selectedPeriod'],e['instrument']['pipe'](filterOption())])['pipe'](tap(([aC])=>{const aD=I(aC);J(aD);})),M=aC=>{return aC!==![];},[N,O]=createPropertyAdapter(pipe(e['instrument']['getValue'](),option['map'](aC=>M(aC['tradable'])),option['getOrElse'](constTrue))),P=pipe(e['instrument'],filterOption(),observable['map'](aC=>aC['tradable']),distinctUntilChanged(),tap(aC=>N(M(aC)))),Q=(aC,aD=!![])=>B(chartSettingsLens(['chartReact','candlesData','price'])['set'](aC)(t['getValue']()['settings']),aD),R=aC=>B(chartSettingsLens(['chartReact','candlesData','candleAlignment'])['set'](aC)(t['getValue']()['settings'])),S=aC=>B(aC),T=()=>{const aC={...t['getValue']()['settings'],...q};B(aC);},U=aC=>{const aD=t['getValue']();B(lensOffsetsVisible['set'](aC)(aD['settings']));},V=aC=>{const aD=t['getValue']();B(lensVolumesShowSeparately['set'](aC)(aD['settings']));},W=aC=>{const aD=t['getValue']();B(lensVolumesVisible['set'](aC)(aD['settings']));},X=aC=>{const aD=t['getValue']();B(lensCrossToolMangetTarget['set'](aC)(aD['settings']));},Y=aC=>{const aD=t['getValue']();B(lensRtlMode['set'](aC)(aD['settings']));},Z=aC=>{const aD=t['getValue']();B(lensSessionBreaks['set'](aC)(aD['settings']));},a0=aC=>{const aD=t['getValue']();B(lensExtendedHours['set'](aC)(aD['settings']));},a1=aC=>{const aD=t['getValue']();B(lensAggregationTimeframeChangeStrategy['set'](aC)(aD['settings']));},a2=aC=>{const aD=t['getValue']();B(lensInstrumentTimeframeChangeStrategy['set'](aC)(aD['settings']));},a3=aC=>{const aD=t['getValue']()['settings'];B({...aD,'chartReact':{...aD['chartReact'],'viewportStrategy':{...aD['chartReact']['viewportStrategy'],'aggregations':aC}}});},a4=aC=>{const aD=t['getValue']()['settings'];B({...aD,'chartReact':{...aD['chartReact'],'viewportStrategy':{...aD['chartReact']['viewportStrategy'],'instrument':aC}}});},a5=aC=>{const aD=t['getValue']();B(lensApplyPeriodUponCreation['set'](aC)(aD['settings']));},a6=aC=>{W(aC),aC?c['volumes']?.['enable']():c['volumes']?.['disable']();},a7=aC=>{if(!m['priceTypes']['includes'](aC))return Q(takeFirstAvailablePriceType(m['priceTypes']),![]),![];return!![];},a8=d['state']['pipe'](observable['map'](aC=>aC['charts'][p]['chartSettings']),observable['filter'](aC=>aC!==t['getValue']()['settings']),tap(aC=>{s({...t['getValue'](),'settings':aC});})),a9=d['state']['pipe'](observable['map'](aC=>aC['charts'][p]['chartSettings']),observable['filter'](aC=>!deepEqual(aC,t['getValue']()['settings'])),tap(()=>{const aC=Object['values'](e['compareInstruments']['getValue']());a7('mark')&&hasForex(aC)&&Q('mark');})),aa=pipe(waitForCandlesSet(c),switchMap(()=>c['scale']['changed']),map(()=>c['scale']['state']['auto']),distinctUntilChanged(),skip(0x1),tap(aC=>{pipe(t['getValue']()['settings'],chartSettingsAutoScalePriceAxis['set'](aC),aD=>B(aD,![]));})),ab=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['offsets']),distinctUntilChanged(ChartOffsetsEq['equals']),tap(aC=>c['data']['setOffsets'](aC))),ac=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['volumes']['showSeparately']),distinctUntilChanged(),tap(aC=>c['showSeparateVolumes'](aC))),ad=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['volumes']['visible']),distinctUntilChanged(),tap(aC=>c['volumes']?.['setVisible'](aC))),ae=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['crossTool']['magnetTarget']),distinctUntilChanged(),tap(aC=>c['crosshair']['setMagnetTarget'](aC))),af=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['crossTool']['type']),distinctUntilChanged(),tap(aC=>c['crosshair']['setType'](aC))),ag=pipe(f['type'],tap(aC=>{const aD=t['getValue']()['settings']['chartCore']['components']['crossTool']['magnetTarget'];pipe(getAvailableCrosstoolMagnetTargets(aC),array['findFirst'](aE=>aE===aD),option['fold'](()=>X('C'),constVoid));})),ah=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['themes']),distinctUntilChanged(),tap(aC=>{const aD=i['activeTheme']['getValue']();c['setColors'](aC[aD]);})),ai=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['chart']['showCandlesBorder']),distinctUntilChanged(),tap(aC=>c['setShowCandleBorders'](aC))),aj=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['highLow']['visible']),distinctUntilChanged(),tap(aC=>c['setHighLowVisible'](aC))),ak=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['grid']['vertical']),distinctUntilChanged(),tap(aC=>{c['setGridVertical'](aC);})),al=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['grid']['horizontal']),distinctUntilChanged(),tap(aC=>{c['setGridHorizontal'](aC);})),am=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['waterMark']['visible']),distinctUntilChanged(),observable['filter'](()=>c['chartModel']['mainCandleSeries']['dataPoints']['length']>0x0&&option['isSome'](e['instrument']['getValue']())),tap(aC=>{c['watermark']['setWaterMarkVisible'](aC);})),an=pipe(e['initialHistoryData'],observable['filter'](()=>m['watermark']['mode']==='instrument'),observable['filter'](aC=>pipe(aC,array['some'](aD=>pipe(e['instrument']['getValue'](),option['fold'](()=>!![],aE=>aD['instrument']===aE['symbol']&&aD['data']['length']!==0x0))))),tap(()=>{const aC=getPeriodLongString(g['selectedPeriod']['getValue'](),l['aggregationPeriod']),aD=t['getValue']()['settings']['chartCore']['components']['waterMark']['visible'],aE=pipe(e['instrument']['getValue'](),option['toUndefined']);aE&&(c['watermark']['setWaterMarkData']({'firstRow':aE['symbol'],'secondRow':aE['description'],'thirdRow':aC}),c['watermark']['setWaterMarkVisible'](aD));})),ao=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['chart']['showWicks']),distinctUntilChanged(),tap(aC=>c['data']['setShowWicks'](aC))),ap=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['components']['chart']['equivolume']['showClosePrice']),distinctUntilChanged(),tap(aC=>c['equivolume']['setShowClosePrice'](aC))),aq=pipe(t,observable['map'](aC=>aC['settings']['chartCore']['rtl']),distinctUntilChanged(),tap(aC=>c['setRtl'](aC))),ar=pipe(c['bounds']['observeBoundsChanged'](CanvasElement['X_AXIS']),tap(aC=>w(aC['y']))),as=pipe(t,observable['map'](aC=>aC['settings']['chartReact']['candlesData']['candleAlignment']),distinctUntilChanged(),tap(aC=>{e['changeCandlesAlignment'](aC);})),at=pipe(t,observable['map'](aC=>aC['settings']['chartReact']['candlesData']['price']),distinctUntilChanged(),pairwise(),tap(([aC,aD])=>{k['sendNotification'](l['notifications']['notificationDataTypeChanged']+':\x20\x0a\x0a\x09\x09\x09\x09\x09\x09'+l['settingsPopup']['priceTypes'][aC]+'\x20â\x20'+l['settingsPopup']['priceTypes'][aD]),e['changePriceType'](aD);})),au=pipe(e['instrument'],observable['filterMap'](identity),filter(isForex),filter(()=>t['getValue']()['settings']['chartReact']['candlesData']['price']==='last'),tap(()=>{a7('mark')&&Q('mark',![]);})),av=pipe(e['instrument'],observable['filterMap'](identity),filter(isStock),filter(()=>t['getValue']()['settings']['chartReact']['candlesData']['price']!=='last'),tap(()=>{const aC=Object['values'](e['compareInstruments']['getValue']());if(a7('mark')&&hasForex(aC)){Q('mark',![]);return;}a7('last')&&Q('last',![]);})),aw=pipe(e['compareInstruments'],tap(()=>{const aC=Object['values'](e['compareInstruments']['getValue']());a7('mark')&&hasForex(aC)&&Q('mark',![]);})),ax=pipe(t,observable['map'](aC=>aC['settings']),tap(aC=>y['forEach'](aD=>aD(p,aC))),finalize(()=>y['clear']())),ay=pipe(merge(aw,a8,ab,ac,ad,ah,ai,a9,aj,ak,al,am,aa,aq,ar,L,ae,af,P,ao,ap,as,at,au,av,an,ag,ax),share()),az=pipe(t,observable['map'](aC=>aC['isOpened']),distinctUntilChanged()),aA=pipe(t,observable['map'](aC=>aC['activeTab']),distinctUntilChanged()),aB=pipe(c['bounds']['observeBoundsChanged'](CanvasElement['CANVAS']),observable['map'](aC=>({...aC})),distinctUntilChanged());return newSink(callTracerProxy('chartConfiguratorViewModel',{'setVolumesEnabled':a6,'state':t,'setConfig':B,'onTabActivate':E,'setAggregationTimeframeChangeStrategy':a1,'setInstrumentTimeframeChangeStrategy':a2,'setAggregationViewportStrategy':a3,'setInstrumentViewportStrategy':a4,'setApplyPeriodUponCreation':a5,'toggleVolumesMode':V,'toggleVolumesVisible':W,'toggleSessionBreaks':Z,'toggleExtendedHours':a0,'onOpen':F,'onRestoreDefaultConfig':T,'onRestoreDefaultConfigTab':S,'onClose':G,'onToggle':H,'togglePaddings':U,'setRTLMode':Y,'setPriceType':Q,'setCandlesAlignment':R,'onChartSettingsChanged':A,'defaultConfig':q,'config':v,'isOpened$':az,'activeTab$':aA,'switchAxisButtonsTopMargin':x,'sessionBreaksDisabled':K,'tradingAllowed':O,'setSettingsByPath':C,'observeBounds$':aB,'setTradingBoundaries':D}),ay);});const getInitialSettings=(c,d)=>{const e=c['state']['getValue'](),f=c['selectedChartId']['getValue']();return e['isGeneralSettingsSyncEnabled']?e['charts'][f]['chartSettings']:d;};function sessionBreaksDisabledPredicate(c){return periodToMinutes(c)>=0x5a0;}function resetCandlesAlignmentToSessionsIfExtendedHours(c){const d=c['chartReact']['extendedHours']['visible'],e=c['chartReact']['candlesData']['candleAlignment']==='session_start';if(d&&e)return chartSettingsLens(['chartReact','candlesData','candleAlignment'])['set']('midnight')(c);return c;}function hasForex(c){return c['find'](d=>d['type']==='FOREX');}